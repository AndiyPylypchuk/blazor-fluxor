using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Blazor.Fluxor.Services;
using Microsoft.AspNetCore.Blazor;
using Microsoft.AspNetCore.Blazor.RenderTree;

namespace Blazor.Fluxor
{
	/// <see cref="IStore"/>
	public class Store : IStore
	{
		/// <see cref="IStore.Features"/>
		public IReadOnlyDictionary<string, IFeature> Features => FeaturesByName;

		private IBrowserInteropService BrowserInteropService;
		private readonly Dictionary<string, IFeature> FeaturesByName = new Dictionary<string, IFeature>(StringComparer.InvariantCultureIgnoreCase);
		private readonly List<IEffect> Effects = new List<IEffect>();
		private readonly List<IMiddleware> Middlewares = new List<IMiddleware>();
		private readonly List<IMiddleware> ReversedMiddlewares = new List<IMiddleware>();

		private int BeginMiddlewareChangeCount;
		private bool HasActivatedStore;
		private bool IsInsideMiddlewareChange => BeginMiddlewareChangeCount > 0;

		/// <summary>
		/// Creates an instance of the store
		/// </summary>
		/// <param name="browserInteropService">The BrowserInteropService the Browser will use to initialise the store</param>
		public Store(IBrowserInteropService browserInteropService)
		{
			BrowserInteropService = browserInteropService;
			BrowserInteropService.PageLoaded += OnPageLoaded;
		}

		/// <see cref="IStore.AddFeature(IFeature)"/>
		public void AddFeature(IFeature feature)
		{
			if (feature == null)
				throw new ArgumentNullException(nameof(feature));

			FeaturesByName.Add(feature.GetName(), feature);
		}

		/// <see cref="IDispatcher.DispatchAsync(IAction)"/>
		public async Task DispatchAsync(IAction action)
		{
			if (action == null)
				throw new ArgumentNullException(nameof(action));

			// Do not allow task dispatching inside a middleware-change.
			// These change cycles are for things like "jump to state" in Redux Dev Tools
			// and should be short lived.
			// We avoid dispatching inside a middleware change because we don't want UI events (like component Init)
			// that trigger actions (such as fetching data from a server) to execute
			if (IsInsideMiddlewareChange)
				return;

			if (!HasActivatedStore)
				throw new InvalidOperationException("Store has not been initialized. Add `@Store.Initialize()` to your layout page");

			var actionsToDispatch = new Queue<IAction>();
			actionsToDispatch.Enqueue(action);

			while (actionsToDispatch.Any())
			{
				IAction currentActionToDispatch = actionsToDispatch.Dequeue();

				// Allow middlewares to veto the dispatching of an action
				if (Middlewares.Any(x => !x.MayDispatchAction(currentActionToDispatch)))
					break;

				ExecuteMiddlewareBeforeDispatch(currentActionToDispatch);

				// Notify all features of this action
				foreach (var featureInstance in FeaturesByName.Values)
				{
					NotifyFeatureOfDispatch(featureInstance, currentActionToDispatch);
				};

				IEnumerable<IAction> actionsCreatedByMiddlewares =
					ExecuteMiddlewareAfterDispatch(currentActionToDispatch)
					?? new IAction[0];

				// Get any actions generated by side-effects
				IEnumerable<IAction> actionsCreatedBySideEffects =
					await TriggerEffects(currentActionToDispatch);

				// Now execute any new actions
				IEnumerable<IAction> allNewActionsToDispatch =
					actionsCreatedByMiddlewares.Union(actionsCreatedBySideEffects);
				foreach (IAction newActionToDispatch in allNewActionsToDispatch)
					actionsToDispatch.Enqueue(newActionToDispatch);
			}
		}

		/// <see cref="IStore.AddEffect(IEffect)"/>
		public void AddEffect(IEffect effect)
		{
			if (effect == null)
				throw new ArgumentNullException(nameof(effect));
			Effects.Add(effect);
		}

		/// <see cref="IStore.AddMiddleware(IMiddleware)"/>
		public void AddMiddleware(IMiddleware middleware)
		{
			Middlewares.Add(middleware);
			ReversedMiddlewares.Insert(0, middleware);
			// Initialize the middleware immediately if the store has already been initialized, otherwise this will be
			// done the first time DispatchAsync is called
			if (HasActivatedStore)
			{
				middleware.Initialize(this);
				middleware.AfterInitializeAllMiddlewares();
			}
		}

		/// <see cref="IStore.BeginInternalMiddlewareChange"/>
		public IDisposable BeginInternalMiddlewareChange()
		{
			BeginMiddlewareChangeCount++;
			IDisposable[] disposables = Middlewares
				.Select(x => x.BeginInternalMiddlewareChange())
				.ToArray();
			return new DisposableCallback(() =>
			{
				BeginMiddlewareChangeCount--;
				if (BeginMiddlewareChangeCount == 0)
					disposables.ToList().ForEach(x => x.Dispose());
			});
		}

		/// <see cref="IStore.Initialize"/>
		public RenderFragment Initialize()
		{
			return (RenderTreeBuilder renderer) =>
			{
				int sequence = 0;
				foreach (IMiddleware middleware in Middlewares)
				{
					sequence++;
					string middlewareScript = middleware.GetClientScripts();
					if (middlewareScript != null)
					{
						renderer.OpenElement(sequence, "script");
						renderer.AddContent(sequence, $"// Middleware scripts: {middleware.GetType().FullName}\r\n{middlewareScript}");
						renderer.CloseElement();
					}
				}

				renderer.OpenElement(sequence++, "script");
				renderer.AddContent(sequence, GetClientScripts());
				renderer.CloseElement();
			};
		}

		private async Task<IEnumerable<IAction>> TriggerEffects(IAction action)
		{
			var allActionsCreatedByAllSideEffects = new List<IAction>();

			var effectsToTrigger = Effects.Where(x => x.ShouldReactToAction(action));
			foreach (var effect in effectsToTrigger)
			{
				IAction[] actionsFromSideEffect = await effect.HandleAsync(action);
				if (actionsFromSideEffect != null)
				{
					foreach (IAction actionFromSideEffect in actionsFromSideEffect)
					{
						if (actionFromSideEffect != null)
							allActionsCreatedByAllSideEffects.Add(actionFromSideEffect);
					}
				}
			}
			return allActionsCreatedByAllSideEffects;
		}

		private void InitializeMiddlewares()
		{
			Middlewares.ForEach(x => x.Initialize(this));
			Middlewares.ForEach(x => x.AfterInitializeAllMiddlewares());
		}

		private void ExecuteMiddlewareBeforeDispatch(IAction actionAboutToBeDispatched)
		{
			foreach (IMiddleware middleWare in Middlewares)
				middleWare.BeforeDispatch(actionAboutToBeDispatched);
		}

		private IEnumerable<IAction> ExecuteMiddlewareAfterDispatch(IAction actionJustDispatched)
		{
			IEnumerable<IAction> actionsToDispatch =
				Middlewares.SelectMany(x => x.AfterDispatch(actionJustDispatched) ?? Array.Empty<IAction>());
			return actionsToDispatch;
		}

		private void NotifyFeatureOfDispatch(IFeature feature, IAction action)
		{
			string methodName = nameof(IFeature.ReceiveDispatchNotificationFromStore);
			// We need the generic method for the feature instance
			MethodInfo methodInfo = feature
				.GetType()
				.GetMethod(methodName);

			methodInfo.Invoke(feature, new object[] { action });
		}

		private void ActivateStore()
		{
			if (HasActivatedStore)
				return;

			HasActivatedStore = true;
			InitializeMiddlewares();
#pragma warning disable CS4014
			// Ignore: "Because this call is not awaited, execution of the current method continues before the call is completed"
			// Reason: If we await it then any Effect<StoreInitializedAction> // implementations that fire off long running
			// tasks will actually cause a thread lock. Because the store + state is completely initialised it is save to
			// fire and forget the StoreInitializedAction. 
			DispatchAsync(new StoreInitializedAction());
#pragma warning restore CS4014 
		}

		private string GetClientScripts()
		{
			return BrowserInteropService.GetClientScripts();
		}

		private void OnPageLoaded(object sender, EventArgs e)
		{
			BrowserInteropService.PageLoaded -= OnPageLoaded;
			ActivateStore();
		}
	}
}
